const p = ["discordsays.com", "discordsez.com"], a = "/.proxy";
function h() {
  return new URLSearchParams(window.location.search).get("frame_id") != null;
}
function d(t, o = a) {
  const e = typeof t == "string" ? window.location.origin : void 0, c = new URL(t.toString(), e);
  return p.some((n) => c.hostname.endsWith(n)) && !c.pathname.startsWith(o) && (c.pathname = o + c.pathname), c;
}
function l() {
  const t = globalThis.fetch;
  globalThis.fetch = function(o, e) {
    const { prefix: c = a, ...s } = e ?? {}, n = d(o, c);
    return t(n, s);
  };
}
function u() {
  WebSocket = new Proxy(window.WebSocket, {
    construct(o, e) {
      const c = d(e[0]), s = e[1];
      return new o(c, s);
    }
  });
}
const r = "node_modules/@robojs/patch/.robo/public/discord-proxy-patch.umd.js", i = "assets/discord-proxy-patch.umd.js";
function m() {
  let t;
  return {
    name: "discord-proxy-patch",
    enforce: "pre",
    configResolved(o) {
      t = o.command;
    },
    transformIndexHtml(o) {
      const e = t === "build" ? i : r;
      return o.replace("<head>", `<head>
		<script src="${e}"><\/script>`);
    },
    async buildStart() {
      if (t !== "build")
        return;
      const o = await this.load({ id: r });
      o != null && o.code ? this.emitFile({
        type: "asset",
        fileName: i,
        source: o.code
      }) : console.error("Failed to load patch script:", o);
    }
  };
}
const f = {
  patch: b,
  Vite: m
};
function b() {
  h() ? (console.log("@robojs/patch: Applying patch for Discord Proxy"), l(), u()) : console.log("@robojs/patch: Not in Discord Activity, skipping patch");
}
f.patch();
